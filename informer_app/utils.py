import os
from abc import ABC, abstractmethod
from datetime import timedelta

from django.contrib.gis.gdal import SpatialReference, CoordTransform
from django.db.models import QuerySet

from forecast_app.models import ForecastGroup
from informer_app.models import InfoPoint
from dataclasses import dataclass


class MessageCreator(ABC):
    separator = '\n'
    levels_aliases = {
        1: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —à–∫–≤–∞–ª–∞',
        2: '–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —à–∫–≤–∞–ª–∞',
        3: '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —à–∫–≤–∞–ª–∞',
        4: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —à–∫–≤–∞–ª–∞'
    }

    @abstractmethod
    def get_message(self, forecastDate: str, forecasts: QuerySet) -> str:
        """

        :param forecastDate: –î–ª—è –∫–∞–∫–æ–π –¥–∞—Ç—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        :param forecasts: –ü—Ä–æ–≥–Ω–æ–∑—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—Ç—ã
        :return:
        """
        pass

    @staticmethod
    def get_emoji_for_code(level_code: int, count =2) -> str:
        """
        –≠–º–æ–¥–∂–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è —è–≤–ª–µ–Ω–∏—è

        :param level_code: –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ —è–≤–ª–µ–Ω–∏—è
        :param count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–∞–π–ª–∏–∫–æ–≤
        """
        if level_code == 1:
            return  "üò±" * count
        if level_code == 2:
            return "üò¨" * count
        if level_code == 3:
            return "‚òπ" * count
        if level_code == 4:
            return "üôÅ" * count


@dataclass
class UserMessageCreator(MessageCreator):
    userPoint: InfoPoint
    def get_message(self, forecastDate: str, forecasts: QuerySet) -> str:
        rowSeparator = MessageCreator.separator * 2
        message = f'–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ - –Ω–∞ **{forecastDate}**'
        message += rowSeparator

        if forecasts.count() == 0:
            message += f'–ü–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –≤–∞—à–µ–π —Ç–æ—á–∫–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è **{self.userPoint.name}** –æ–ø–∞—Å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'
            return message

        message += f'–î–ª—è –≤–∞—à–µ–π —Ç–æ—á–∫–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è **{self.userPoint.name}** –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è:'

        # –∫–∞–∫–∏–µ –≤–æ–æ–±—â–µ —É—Ä–æ–≤–Ω–∏ –µ—Å—Ç—å –¥–ª—è –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        level_codes = set(forecasts.values_list('level_code', flat=True))
        for level_code in sorted(level_codes):
            message += rowSeparator

            emoji = MessageCreator.get_emoji_for_code(level_code)
            level_alias = MessageCreator.levels_aliases.get(level_code)
            message += f"{emoji} ** {level_alias} ** {emoji} \n"
            message += rowSeparator

            for f in forecasts.filter(level_code=level_code).order_by('forecast_datetime_utc'):
                pntDatetime = f.forecast_datetime_utc - timedelta(hours=self.userPoint.pointFromUTCOffset)
                message += (
                    f"–í—Ä–µ–º—è - {pntDatetime.strftime('%H:%M')};"
                    f" –Ø–≤–ª–µ–Ω–∏–µ -  {f.forecast_group.alias}; \n"
                )

        return message


@dataclass
class AdminMessageCreator(MessageCreator):
    modelName: str
    forecastType: str

    def get_message(self, forecastDate: str, forecasts: QuerySet) -> str:

        rowSeparator = MessageCreator.separator * 2

        message = '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è **–∞–¥–º–∏–Ω–æ–≤** —Å–∞–π—Ç–∞'
        message += rowSeparator
        message += f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–æ–¥–µ–ª–∏ **{self.modelName}**, —Ç–∏–ø - {self.forecastType}'
        message += rowSeparator
        message += f'–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ - –Ω–∞ {forecastDate}'
        message += rowSeparator
        message += '–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –û–Ø:'
        message += rowSeparator

        levels = set(forecasts.values_list('level_code', flat=True))
        for level in levels: # –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
            emoji = MessageCreator.get_emoji_for_code(level)
            message += f"{emoji} **{MessageCreator.levels_aliases.get(level)}**"
            message += rowSeparator
            eventsIds = set(forecasts.filter(level_code=level).values_list('forecast_group_id', flat=True))
            for eventId in eventsIds: # –≤—Å–µ —è–≤–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å–∏–ª—å–Ω—ã–µ —à–∫–≤–∞–ª—ã –∏ —Å–∏–ª—å–Ω—ã–µ —Å–º–µ—Ä—á–∏)
                subquery = forecasts.filter(level_code=level, forecast_group_id=eventId)
                area = AdminMessageCreator.calc_area(subquery)
                message += "".join([
                    f"–Ø–≤–ª–µ–Ω–∏–µ - **{ForecastGroup.objects.get(pk=eventId).alias}**, ",
                    f"–ü–ª–æ—â–∞–¥—å -{area:.2f} –∫–º.–∫–≤, ",
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤- {subquery.count()};"
                ])
                message += rowSeparator

        if forecasts.count() != 0 :
            message += f'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å {os.getenv("NOTIFICATION_FRONT_ADDRESS", default="http://ogs.psu.ru:5003")}'

        return message

    @staticmethod
    def calc_area(data: QuerySet):
        wgs84 = SpatialReference('WGS84')
        # –∫–æ–Ω–∏—á–µ—Å–∫–∞—è –∞–ª—å–±–µ—Ä—Å–∞
        albersConic = '+proj=eqdc +lat_0=0 +lon_0=0 +lat_1=15 +lat_2=65 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m no_defs'
        albersConic = SpatialReference(albersConic)
        ct = CoordTransform(wgs84, albersConic)
        # –í –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö, –≤–∞–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏–Ω–∞—á–µ –Ω–∞ –º–µ—Å—Ç–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
        area = sum([f.mpoly.transform(ct=ct, clone=True).area for f in list(data.all())]) / 1000000
        return area
