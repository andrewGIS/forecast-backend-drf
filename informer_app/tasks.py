import os
from datetime import datetime,timedelta

from django.contrib.gis.gdal import SpatialReference, CoordTransform
from django.contrib.gis.measure import D
from django.db.models.query import QuerySet
from telethon import TelegramClient
import asyncio

from auth_app.models import Person
from celery_app import app
from forecast_app.models import VectorForecast, ForecastModel
from informer_app.models import InfoPoint


async def main(telegramLogin='@antar93',  message='Testing telethon'):
    app_id = int(os.getenv('NOTIFICATION_APP_ID', None))
    api_hash = os.getenv('NOTIFICATION_APP_HASH', None)
    bot_id = os.getenv('NOTIFICATION_BOT_TOKEN', None)
    client = TelegramClient('anon', app_id, api_hash)
    await client.start(bot_token=bot_id)
    await client.send_message(telegramLogin, message)
    await client.disconnect()


@app.task(name="send_notification")
def send_test_message():
    asyncio.run(main(
        "antar93",
        '–ü–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –≤–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –æ–ø–∞—Å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'
    ))
    # return HttpResponse('ok')


@app.task(name="send_notifications")
def send_notifications(modelName, forecastType, filterDate=None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ª–æ–≥–∏–Ω–æ–º –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π —Ç–æ—á–∫–µ
    :return:
    """
    BUFFER_SIZE = 20000 # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ç–æ—á–∫–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    # TODO –ø–æ–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–æ gfs –º–æ–¥–µ–ª–∏
    accountsWithLogins = Person.objects.filter(telegram_login__isnull=False)
    usedForecastModel = ForecastModel.objects.get(name=modelName)
    # TODO –¥–æ–±–∞–≤–∏—Ç—å —Å–º–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UTC
    if not filterDate:
        filterDate = datetime.now().date()

    for account in accountsWithLogins:
        allUserPoints = InfoPoint.objects.filter(user=account.user)
        if allUserPoints.count() == 0:
            continue

        # TODO –ø–æ–∫–∞ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ç–æ—á–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        targetPoint = allUserPoints[0]

        # TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞–¥–æ –ª–∏ —Ç–∞–∫ –¥–µ–ª–∞—Ç—å?
        if forecastType == '12':
            # –ï—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç 12 —á–∞—Å–æ–≤ –¥–Ω—è (–ø–æ–ª—É–¥–Ω—è) —É–∂–µ –∏–Ω—Ç—Ä–µ—Å–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
            filterDate = datetime.now().date() + timedelta(days=1)

        userForecasts = VectorForecast.objects.filter(
            forecast_date=filterDate,
            model=usedForecastModel,
            forecast_type=forecastType,
            mpoly__distance_lte=(targetPoint.point, D(m=BUFFER_SIZE))
        )
        userForecasts = userForecasts.order_by('forecast_datetime_utc')
        userForecasts = userForecasts.distinct('level_code', 'model', 'forecast_datetime_utc')

        message = f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–æ–¥–µ–ª–∏ **{modelName}**, —Ç–∏–ø - {forecastType}'
        message += '\n'
        message += '\n'
        message += f'–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ - –Ω–∞ {filterDate}'
        message += '\n'

        if userForecasts.count() == 0:
            message += '\n'
            message += '–ü–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –≤–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –æ–ø–∞—Å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'
            asyncio.run(main(
                account.telegram_login,
                message
            ))
            return 'Not event founded'

        # –∫–∞–∫–∏–µ –≤–æ–æ–±—â–µ —É—Ä–æ–≤–Ω–∏ –µ—Å—Ç—å –¥–ª—è –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        level_codes = set(userForecasts.values_list('level_code', flat=True))
        for level_code in sorted(level_codes):
            message += '\n'
            emoji = None
            count = 2
            if level_code == 1:
                emoji = "üò±"*count
            if level_code == 2:
                emoji = "üò¨"*count
            if level_code == 3:
                emoji = "‚òπ"*count
            if level_code == 4:
                emoji = "üôÅ"*count

            message += f"{emoji} ** –£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ {level_code}** {emoji} \n"
            message += '\n'
            for f in userForecasts.filter(level_code=level_code):
                pntDatetime = f.forecast_datetime_utc - timedelta(hours=targetPoint.pointFromUTCOffset)
                message += (
                        f"–í—Ä–µ–º—è - {pntDatetime.strftime('%H:%M')};"
                        f" –Ø–≤–ª–µ–Ω–∏–µ -  {f.forecast_group.alias}; \n"
                )

        asyncio.run(main(account.telegram_login, message))
        return message

@app.task(name="send_notifications_admin")
def send_notifications_admin(modelName, forecastType, filterDate=None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º —Å—É–º–º–∞—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    :return:
    """
    # TODO –º–æ–∂–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å –ø–æ –≥—Ä—É–ø–ø–µ
    # TODO –ø–æ–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–æ gfs –º–æ–¥–µ–ª–∏
    adminWithLogins = Person.objects.filter(telegram_login__isnull=False, user__is_staff=True)
    usedForecastModel = ForecastModel.objects.get(name=modelName)

    if not filterDate:
        filterDate = datetime.now().date()
    if forecastType == '12':
        # –ï—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç 12 —á–∞—Å–æ–≤ –¥–Ω—è (–ø–æ–ª—É–¥–Ω—è) —É–∂–µ –∏–Ω—Ç—Ä–µ—Å–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
        filterDate = filterDate + timedelta(days=1)

    todayForecasts = VectorForecast.objects.filter(
        forecast_date=filterDate,
        model=usedForecastModel,
        forecast_type=forecastType
    )

    message = f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–æ–¥–µ–ª–∏ **{modelName}**, —Ç–∏–ø - {forecastType}'
    message += '\n'
    message += '\n'
    message += f'–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ - –Ω–∞ {filterDate}'
    message += '\n'
    message += '\n'
    message += '–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –û–Ø:'
    message += '\n'

    summary = todayForecasts.distinct('level_code', 'forecast_group_id').order_by('level_code')

    for row in summary:
        message += '\n'
        emoji = None
        count = 1
        if row.level_code == 1:
            emoji = "üò±" * count
        if row.level_code == 2:
            emoji = "üò¨" * count
        if row.level_code == 3:
            emoji = "‚òπ" * count
        if row.level_code == 4:
            emoji = "üôÅ" * count

        subquery = todayForecasts.filter(level_code=row.level_code, forecast_group_id=row.forecast_group.id)
        area = calc_area(subquery)
        message += "".join([
            f"{emoji} - –£—Ä–æ–≤–µ–Ω—å  - **{row.level_code}**, ",
            f"–Ø–≤–ª–µ–Ω–∏–µ - **{row.forecast_group.alias}**, ",
            f"–ü–ª–æ—â–∞–¥—å -{area:.2f} –∫–º.–∫–≤, ",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤- {subquery.count()}; \n"
        ])

    for account in adminWithLogins:
        if todayForecasts.count() != 0 :
            message += '\n'
            message += f'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å {os.getenv("NOTIFICATION_FRONT_ADDRESS", default="http://ogs.psu.ru:5003")}'
        asyncio.run(main(account.telegram_login, message))
        return message


def calc_area(data: QuerySet):
    wgs84 = SpatialReference('WGS84')
    # –∫–æ–Ω–∏—á–µ—Å–∫–∞—è –∞–ª—å–±–µ—Ä—Å–∞
    albersConic = '+proj=eqdc +lat_0=0 +lon_0=0 +lat_1=15 +lat_2=65 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m no_defs'
    albersConic = SpatialReference(albersConic)
    ct = CoordTransform(wgs84, albersConic)
    # –í –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö, –≤–∞–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏–Ω–∞—á–µ –Ω–∞ –º–µ—Å—Ç–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
    area = sum([f.mpoly.transform(ct=ct, clone=True).area for f in list(data.all())])/1000000
    return area
